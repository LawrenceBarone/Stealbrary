//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Leaderboards.Internal.Http;



namespace Unity.Services.Leaderboards.Internal.Models
{
    /// <summary>
    /// LeaderboardEntry model
    /// </summary>
    [Preserve]
    [DataContract(Name = "LeaderboardEntry")]
    internal class LeaderboardEntry
    {
        /// <summary>
        /// Creates an instance of LeaderboardEntry.
        /// </summary>
        /// <param name="playerId">playerId param</param>
        /// <param name="playerName">playerName param</param>
        /// <param name="rank">rank param</param>
        /// <param name="score">score param</param>
        /// <param name="tier">tier param</param>
        /// <param name="updatedTime">updatedTime param</param>
        [Preserve]
        public LeaderboardEntry(string playerId, string playerName, int rank, double score, string tier = default, DateTime updatedTime = default)
        {
            PlayerId = playerId;
            PlayerName = playerName;
            Rank = rank;
            Score = score;
            Tier = tier;
            UpdatedTime = updatedTime;
        }

        /// <summary>
        /// Parameter playerId of LeaderboardEntry
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerId", IsRequired = true, EmitDefaultValue = true)]
        public string PlayerId{ get; }

        /// <summary>
        /// Parameter playerName of LeaderboardEntry
        /// </summary>
        [Preserve]
        [DataMember(Name = "playerName", IsRequired = true, EmitDefaultValue = true)]
        public string PlayerName{ get; }

        /// <summary>
        /// Parameter rank of LeaderboardEntry
        /// </summary>
        [Preserve]
        [DataMember(Name = "rank", IsRequired = true, EmitDefaultValue = true)]
        public int Rank{ get; }

        /// <summary>
        /// Parameter score of LeaderboardEntry
        /// </summary>
        [Preserve]
        [DataMember(Name = "score", IsRequired = true, EmitDefaultValue = true)]
        public double Score{ get; }

        /// <summary>
        /// Parameter tier of LeaderboardEntry
        /// </summary>
        [Preserve]
        [DataMember(Name = "tier", EmitDefaultValue = false)]
        public string Tier{ get; }

        /// <summary>
        /// Parameter updatedTime of LeaderboardEntry
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedTime", EmitDefaultValue = false)]
        public DateTime UpdatedTime{ get; }

        /// <summary>
        /// Formats a LeaderboardEntry into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (PlayerId != null)
            {
                serializedModel += "playerId," + PlayerId + ",";
            }
            if (PlayerName != null)
            {
                serializedModel += "playerName," + PlayerName + ",";
            }
            serializedModel += "rank," + Rank.ToString() + ",";
            serializedModel += "score," + Score.ToString() + ",";

            if (Tier != null)
            {
                serializedModel += "tier," + Tier + ",";
            }
            if (UpdatedTime != null)
            {
                serializedModel += "updatedTime," + UpdatedTime.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a LeaderboardEntry as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (PlayerId != null)
            {
                var playerIdStringValue = PlayerId.ToString();
                dictionary.Add("playerId", playerIdStringValue);
            }

            if (PlayerName != null)
            {
                var playerNameStringValue = PlayerName.ToString();
                dictionary.Add("playerName", playerNameStringValue);
            }

            var rankStringValue = Rank.ToString();
            dictionary.Add("rank", rankStringValue);

            var scoreStringValue = Score.ToString();
            dictionary.Add("score", scoreStringValue);

            if (Tier != null)
            {
                var tierStringValue = Tier.ToString();
                dictionary.Add("tier", tierStringValue);
            }

            if (UpdatedTime != null)
            {
                var updatedTimeStringValue = UpdatedTime.ToString();
                dictionary.Add("updatedTime", updatedTimeStringValue);
            }

            return dictionary;
        }
    }
}
